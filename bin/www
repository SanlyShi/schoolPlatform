#!/usr/bin/env node

/**
 * Module dependencies.
 */

 // https, 未授权忽略
process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0'

var app = require('../app')
var debug = require('debug')('saas-web-prod:server')
var http = require('http')
var config = require('../config')
const loggerFactory = require('../utils/loggerFactory')
const logger = loggerFactory.getLogger(__filename)
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(config.dev.port || process.env.PORT || '3030')
app.set('port', port)

/**
 * Create HTTP server.
 */

var server = http.createServer(app)

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort (val) {
  var port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError (error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening () {
  var addr = server.address()
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  debug('Listening on ' + bind)
  logger.info('[APP] SaaS web listening on ' + bind)
  if (typeof config.dev.removeConsoleLoggerAfterStarted !== 'undefined' ? !!config.dev.removeConsoleLoggerAfterStarted : process.env.NODE_ENV === 'production') {
    logger.info('[logger] remove console transport')
    loggerFactory.removeConsoleTransport()
  }
}
